(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{353:function(n,e,t){var content=t(367);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(59).default)("54f98750",content,!0,{sourceMap:!1})},354:function(n,e,t){var map={"./1-2021-01-11-introduction.json":368,"./2-2021-01-15-marked.json":369,"./3-2021-01-21-circleci.json":370,"./4-2021-02-07-scssgrobal.json":371,"./5-2021-04-05-tokaido-1.json":372,"./6-2021-06-14-serverless-go.json":373,"./7-2021-12-13-sauna-adc.json":374};function r(n){var e=o(n);return t(e)}function o(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}r.keys=function(){return Object.keys(map)},r.resolve=o,n.exports=r,r.id=354},355:function(n,e,t){var content=t(376);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(59).default)("2aa80e2e",content,!0,{sourceMap:!1})},359:function(n,e,t){"use strict";t.r(e);t(51);var r=t(7).a.extend({props:{title:{type:String,default:""},base:{type:String,default:""}},data:function(){var path=encodeURIComponent("https://blog.cotton-portfolio.org")+"/articles?base=".concat(this.base),text="["+this.title+"]";return{twitterLink:"https://twitter.com/intent/tweet?url=".concat(path,"&text=").concat(text,"&lang=ja")}},methods:{windowOpen:function(link){return window.open(link,"_blank","top=100,left=100,width=600,height=500")}}}),o=(t(366),t(27)),component=Object(o.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"button-wrapper"},[n._m(0),n._v(" "),t("div",{staticClass:"flex-text"},[t("span",{on:{click:function(e){return n.windowOpen(n.twitterLink)}}},[n._v("Tweet")])])])}),[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"flex-image"},[e("img",{attrs:{src:"/twitterbtn.png"}})])}],!1,null,null,null);e.default=component.exports},366:function(n,e,t){"use strict";t(353)},367:function(n,e,t){(e=t(58)(!1)).push([n.i,".button-wrapper{width:85px;height:30px;border-radius:4px;color:#fff;background-color:#1b95e0;cursor:pointer;display:flex;flex-direction:row;justify-content:center}.flex-image{height:18px}.flex-image img{height:18px;margin:3px 2px 0 0}.flex-text{padding-top:2px;margin-right:2px}",""]),n.exports=e},368:function(n){n.exports=JSON.parse('{"id":1,"title":"ブログ開設しました。","created_at":"2021-01-11T00:00:00.000Z","updated_at":"2021-01-11T00:00:00.000Z","description":"ブログ開設に際しての簡単なご挨拶です。","tags":"その他","bodyContent":"どうも、コットンです。  \\nこの度新しくブログを開設しましたのでそのご挨拶も兼ねてこの記事を書いています。\\n\\nこのブログでは備忘録的な感じで技術記事を多めに投稿していきます。  \\n旅行などの記事も上げていきたいとは思っているのですが、このご時世なのでかなり先の話になりそうなのが残念です。\\n\\n今後ともよろしくお願いします。","bodyHtml":"<p>どうも、コットンです。<br>\\nこの度新しくブログを開設しましたのでそのご挨拶も兼ねてこの記事を書いています。</p>\\n<p>このブログでは備忘録的な感じで技術記事を多めに投稿していきます。<br>\\n旅行などの記事も上げていきたいとは思っているのですが、このご時世なのでかなり先の話になりそうなのが残念です。</p>\\n<p>今後ともよろしくお願いします。</p>\\n","dir":"posts/json","base":"1-2021-01-11-introduction.json","ext":".json","sourceBase":"1-2021-01-11-introduction.md","sourceExt":".md"}')},369:function(n){n.exports=JSON.parse('{"id":2,"title":"Nuxt.js + marked.js + highlight.jsでブログを作成する","created_at":"2021-01-15T00:00:00.000Z","updated_at":"2021-01-15T00:00:00.000Z","description":"Nuxt.jsで作成されたプロジェクトへmarked.jsとhighlight.jsを導入した際の備忘録的なもの","tags":"Vue.js, Nuxt.js, JavaScript","bodyContent":"このブログはNuxt.jsで作成しているのですが、記事をマークダウンで編集したかったためmarked.jsとhighlight.jsを導入することにしました。この記事はその導入の際の備忘録的なものとなります。\\n\\n## marked.jsとhighlight.jsについて\\n\\nmarked.jsはマークダウン形式の文章をhtml形式へと変換するパッケージ、highlight.jsはhtml形式の文章中コードブロックへハイライトを付与するパッケージです。\\n\\n- marked.js: https://marked.js.org/\\n- highlight.js: https://highlightjs.org/\\n\\n## marked.jsを導入\\nまずプロジェクトへの追加を行います。\\n\\n```shell\\nyarn add marked.js\\n```\\n\\n追加を終えたら実際のvueファイルに記載していきます。\\n\\n```javascript\\n<template>\\n    <div v-html=\'content\'></div>\\n</template>\\n\\n<script>\\nimport marked from \'marked\';\\n\\nexport default {\\n    data() {\\n        return {\\n            article: \'# title \\\\n ## headline\'\\n        }\\n    },\\n    computed: {\\n        content() {\\n            return marked(this.article);\\n        }\\n    }\\n}\\n\\n<\/script>\\n```\\n\\nmarked.jsを読み込んだあと、```computed```内で```marked```を呼び出します。ここでは```marked```の引数に```data```で読み込んだマークダウン形式の文字列を渡しました。\\nその後、```computed```の戻り値```v-html```でバインドを行うことによって画面への描画を行います。\\n\\n## highlight.jsを導入\\nmarked.jsを導入したことによってマークダウンを記事として表示することが出来るようになりました。\\nしかし、今のままではハイライトが当てられていないただの文字列としてしか表示されません。そこでハイライトを当てるためにhighlight.jsを導入していきます。\\n\\n```shell\\nyarn add highlight.js\\n```\\n\\nプロジェクトへの追加を終えたらnuxt.config.jsに設定を追加していきます。\\n\\n```javascript\\nexport default {\\n    css: [\'~/node_modules/highlight.js/styles/atom-one-dark.css\']\\n}\\n```\\n\\nここではハイライトに使用するCSSを読み込みます。今回は```atom-one-dark.css```を読み込みましたが、以下のサイトから好きなスタイルを読み込ませることが出来ます。\\n\\nhttps://highlightjs.org/static/demo/\\n\\nこの設定を```created```内などでmarked.jsのオプションとして適用させます。\\n```javascript\\nimport hljs from \'highlight.js\';\\n\\nexport default {\\n    created() {\\n        marked.setOptions({\\n            langPrefix: \\"hljs language-\\",\\n            highlight: function(code, lang) {\\n                return hljs.highlightAuto(code, [lang]).value\\n            }\\n        });\\n    }\\n}\\n```\\n\\n```langPrefix```オプションにてコードブロックのCSSクラス接頭辞に付与する文字列を指定します。どの環境でも同様かは不明ですが、私の環境ではここを空白にするとコードブロックの背景色が当てられないようになっていました。\\n\\n```highlight```オプションではhighlight.jsをmarked.jsへ適用させています。\\n\\n## まとめ\\n記述するコード自体は少ないですが、marked.jsのオプションを当てるところで挙動が思う通りにいかず時間をかけてしまいました。\\n同じような構成で開発を行う方の参考になれば幸いです。\\n\\n## 参考\\n- https://qiita.com/kira_puka/items/8b5bc56a78fbb98d3df9\\n- https://mebee.info/2020/07/21/post-14683/","bodyHtml":"<p>このブログはNuxt.jsで作成しているのですが、記事をマークダウンで編集したかったためmarked.jsとhighlight.jsを導入することにしました。この記事はその導入の際の備忘録的なものとなります。</p>\\n<h2>marked.jsとhighlight.jsについて</h2>\\n<p>marked.jsはマークダウン形式の文章をhtml形式へと変換するパッケージ、highlight.jsはhtml形式の文章中コードブロックへハイライトを付与するパッケージです。</p>\\n<ul>\\n<li>marked.js: https://marked.js.org/</li>\\n<li>highlight.js: https://highlightjs.org/</li>\\n</ul>\\n<h2>marked.jsを導入</h2>\\n<p>まずプロジェクトへの追加を行います。</p>\\n<pre><code class=\\"hljs\\">yarn add marked.js</code></pre><p>追加を終えたら実際のvueファイルに記載していきます。</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n    <span class=\\"xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">v-html</span>=<span class=\\"hljs-string\\">&#x27;content&#x27;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></span>\\n&lt;/template&gt;\\n\\n<span class=\\"xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">script</span>&gt;</span><span class=\\"javascript\\">\\n<span class=\\"hljs-keyword\\">import</span> marked <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;marked&#x27;</span>;\\n\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-title\\">data</span>(<span class=\\"hljs-params\\"></span>)</span> {\\n        <span class=\\"hljs-keyword\\">return</span> {\\n            <span class=\\"hljs-attr\\">article</span>: <span class=\\"hljs-string\\">&#x27;# title \\\\n ## headline&#x27;</span>\\n        }\\n    },\\n    <span class=\\"hljs-attr\\">computed</span>: {\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-title\\">content</span>(<span class=\\"hljs-params\\"></span>)</span> {\\n            <span class=\\"hljs-keyword\\">return</span> marked(<span class=\\"hljs-built_in\\">this</span>.article);\\n        }\\n    }\\n}\\n\\n</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">script</span>&gt;</span></span></code></pre><p>marked.jsを読み込んだあと、<code>computed</code>内で<code>marked</code>を呼び出します。ここでは<code>marked</code>の引数に<code>data</code>で読み込んだマークダウン形式の文字列を渡しました。\\nその後、<code>computed</code>の戻り値<code>v-html</code>でバインドを行うことによって画面への描画を行います。</p>\\n<h2>highlight.jsを導入</h2>\\n<p>marked.jsを導入したことによってマークダウンを記事として表示することが出来るようになりました。\\nしかし、今のままではハイライトが当てられていないただの文字列としてしか表示されません。そこでハイライトを当てるためにhighlight.jsを導入していきます。</p>\\n<pre><code class=\\"hljs\\">yarn add highlight.js</code></pre><p>プロジェクトへの追加を終えたらnuxt.config.jsに設定を追加していきます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    <span class=\\"hljs-attr\\">css</span>: [<span class=\\"hljs-string\\">&#x27;~/node_modules/highlight.js/styles/atom-one-dark.css&#x27;</span>]\\n}</code></pre><p>ここではハイライトに使用するCSSを読み込みます。今回は<code>atom-one-dark.css</code>を読み込みましたが、以下のサイトから好きなスタイルを読み込ませることが出来ます。</p>\\n<p>https://highlightjs.org/static/demo/</p>\\n<p>この設定を<code>created</code>内などでmarked.jsのオプションとして適用させます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">import</span> hljs <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;highlight.js&#x27;</span>;\\n\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-title\\">created</span>(<span class=\\"hljs-params\\"></span>)</span> {\\n        marked.setOptions({\\n            <span class=\\"hljs-attr\\">langPrefix</span>: <span class=\\"hljs-string\\">&quot;hljs language-&quot;</span>,\\n            <span class=\\"hljs-attr\\">highlight</span>: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">code, lang</span>) </span>{\\n                <span class=\\"hljs-keyword\\">return</span> hljs.highlightAuto(code, [lang]).value\\n            }\\n        });\\n    }\\n}</code></pre><p><code>langPrefix</code>オプションにてコードブロックのCSSクラス接頭辞に付与する文字列を指定します。どの環境でも同様かは不明ですが、私の環境ではここを空白にするとコードブロックの背景色が当てられないようになっていました。</p>\\n<p><code>highlight</code>オプションではhighlight.jsをmarked.jsへ適用させています。</p>\\n<h2>まとめ</h2>\\n<p>記述するコード自体は少ないですが、marked.jsのオプションを当てるところで挙動が思う通りにいかず時間をかけてしまいました。\\n同じような構成で開発を行う方の参考になれば幸いです。</p>\\n<h2>参考</h2>\\n<ul>\\n<li>https://qiita.com/kira_puka/items/8b5bc56a78fbb98d3df9</li>\\n<li>https://mebee.info/2020/07/21/post-14683/</li>\\n</ul>\\n","dir":"posts/json","base":"2-2021-01-15-marked.json","ext":".json","sourceBase":"2-2021-01-15-marked.md","sourceExt":".md"}')},370:function(n){n.exports=JSON.parse('{"id":3,"title":"CircleCI触り始め","created_at":"2021-02-02T00:00:00.000Z","updated_at":"2021-02-02T00:00:00.000Z","description":"CircleCIを触り始めた際のお話","tags":"CircleCI, Nuxt.js","bodyContent":"前回に引き続き、このブログを作成した際に使用した技術についての備忘録となります。\\n今回はCircleCIについてです。\\n\\n## CircleCIとは\\n今流行りのCI/CDツールです。GitHub等のWebサービスと簡単に連携を行えます。\\n有料のプランもありますが、無料プランでもコンテナ1つで週毎に実行出来る処理の上限があるくらいで普通に使えるのでなので個人利用する分には無料プランで問題ないかと思います。\\n\\n## プロジェクトのセットアップ\\n今回はNuxt.jsで作成したプロジェクトのコンポーネント単体テストをCircleCI上で実行することを目的として進めていきます。\\nまずGitHubでリポジトリを作成、作業はdevelopブランチで行いますのでcheckoutします。\\nクローンしたのちにリポジトリのルートディレクトリに```app```というディレクトリを作成しましょう。\\n次に```app```ディレクトリ内にNuxt.jsのプロジェクトを作成します。リポジトリのルートディレクトリで以下のコマンドを実行します。\\n\\n```shell\\nyarn create nuxt-app app\\n```\\n\\n```shell\\n...\\n\\n? Programming language:\\n  JavaScript\\n> TypeScript\\n\\n...\\n\\n? Testing framework:\\n  None\\n> Jest\\n  AVA\\n  WebdriverIO\\n  Nightwatch\\n```\\n\\nテスト用にJestを使用するのでそこの選択を忘れさえしなければ、基本的にEnter押し続けで大丈夫です。好みでTypeScriptを選択していますが、JavaScriptでも大丈夫です。あと以下の説明ではyarnを使用してますのでnpmを使用する場合はyarnをnpmに置き換えて読んでください。\\n\\nNuxt.jsのプロジェクト構築が完了したら、次にCircleCIの設定をしていきます。\\nリポジトリのルートディレクトリに```.circleci```というディレクトリを作成します。\\nさらにその中に```config.yml```というファイルを作成してください。これがCircleCI上でどのようなジョブを走らせるのか設定を追加していきます。\\n\\n現状では以下のディレクトリ構成となります。\\n```\\nroot/\\n├ app/\\n    └ Nuxt.jsのプロジェクト\\n├ .circleci/\\n    └ config.yml\\n```\\n\\nでは、```config.yml```に以下のような設定を記載していきます。\\n```yml\\nversion: 2\\njobs:\\n  test:\\n    docker:\\n      - image: circleci/node:14.15.3\\n    steps:\\n      - checkout\\n      - restore_cache:\\n          keys:\\n            - yarn-{{ checksum \\"app/package.json\\" }}\\n      - run:\\n          name: yarn install\\n          working_directory: app\\n          command: yarn install\\n      - run:\\n          name: test running\\n          working_directory: app\\n          command: yarn test\\nworkflows:\\n  version: 2\\n  test:\\n    jobs:\\n      - test:\\n          filters:\\n            branches:\\n              only:\\n                - develop\\n```\\n\\njobsでは各ジョブでどのような処理を行うのか記載します。\\nworkflowsでは各ジョブがどのような条件下で実行されるのかを指定できます。\\n今回はdevelopブランチではtestが実行、mainブランチではなにも実行されないように指定しています。\\n\\n## テストコード\\nCircleCIとの連携を行う前にテストが通るか確認しておきましょう。\\nテスティングフレームワークにJestを選択した場合、以下のようなLogoコンポーネントの存在をチェックするテストコードが自動で作成されます。\\n\\n```javascript\\nimport { mount } from \'@vue/test-utils\'\\nimport Logo from \'@/components/Logo.vue\'\\n\\ndescribe(\'Logo\', () => {\\n  test(\'is a Vue instance\', () => {\\n    const wrapper = mount(Logo)\\n    expect(wrapper.vm).toBeTruthy()\\n  })\\n})\\n\\n```\\n\\nではappディレクトリ内でテストを実行してみます。\\nプロジェクト作成時にJestを設定してあるため、```yarn test```というコマンドでテストが実行できるよう```package.json```に追記されているはずです。\\n\\n```shell\\n$ yarn test\\nyarn run v1.19.1\\n$ jest\\n PASS  test/Logo.spec.js\\n  Logo\\n    √ is a Vue instance (11 ms)\\n\\n-----------|---------|----------|---------|---------|-------------------\\nFile       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\\n-----------|---------|----------|---------|---------|-------------------\\nAll files  |       0 |      100 |     100 |       0 |\\n index.vue |       0 |      100 |     100 |       0 | 31\\n-----------|---------|----------|---------|---------|-------------------\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   0 total\\nTime:        7.361 s\\nRan all test suites.\\nDone in 9.78s.\\n```\\n\\nテストを無事に終えると以上のようにテスト結果がコンソール上に表示されます。\\n\\n## CircleCIとの連携\\nローカルでの設定が一通り終わったら、一旦変更をpushしてリモートへ反映させておきましょう。\\nそれでは、ここからはGithubリポジトリとCircleCIを実際に連携させていきます。以下のurlにアクセスしてください。\\n\\nhttps://circleci.com/\\n\\nSign Upから自身のGitHubアカウントとの連携を行ってください。\\n連携が完了すると、以下のようなDashboard画面へと遷移します。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/106350040-32582580-6316-11eb-8636-0cc73f6f7acb.png\\" width=\\"100%\\" />\\n\\n左上の赤枠で囲ってあるProjectsタブへ移動しましょう。このタブではリポジトリが一覧化されています。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/106350611-c2e43500-6319-11eb-877f-deaf13c0afb4.png\\" width=\\"100%\\" />\\n\\n連携させたいリポジトリの列の```Set Up Project```をクリックしましょう。\\nすると以下の画面へと遷移します。\\n画面上で記載のある通り、```config.yml```を用意しなくてもCircleCIの編集画面から直接設定をすることも出来ます。\\nしかし、今回は自前のconfig.ymlを用意しているので、```Use Existing Config```をクリックしておきましょう。\\nモーダルが表示されるはずなので、```Start Building```を選択します。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/106605275-0e117880-65a4-11eb-9b6d-826cea24e7ce.png\\" width=\\"100%\\" />\\n\\nこれで連携は完了したのですが、おそらくsshキーの問題で最初の処理は走らないと思われます。\\n処理を強制的に走らせるために空コミットでも入れておきます。以下のコマンドで空コミットが作成出来るので、コミット後再度pushを行いましょう。\\n\\n```shell\\ngit commit --allow-empty -m \\"CircleCIを走らせるためのコミット\\"\\n```\\n\\nするとpushに合わせて処理が走っているのがPipline画面から確認できます。\\n以下のように```Success```と表示されればCircleCI導入は無事終了です！\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/106605375-2c777400-65a4-11eb-8b34-50e13b1b8892.png\\" width=\\"100%\\" />\\n\\ndevelopブランチの変更をmainブランチへと反映させたあと再度pushして処理が走るか確認してみてもいいでしょう。\\n```workflow```にてtestジョブはdevelopブランチでしか走らないように設定してあるので何も実行されないと思います。\\n\\n## まとめ\\nCI/CD...？難しそう...と最初は尻込みしてましたが、いざやってみると意外にも導入は簡単でした。\\n今回はテスト、本ブログではS3への自動デプロイまでしか行いませんでしたが、今後はVPSへの自動デプロイ等の処理組み込みにも挑戦してみたいと思います。\\n\\n## 参考\\n- https://qiita.com/yushi_koga/items/667d962bff841acc3de1","bodyHtml":"<p>前回に引き続き、このブログを作成した際に使用した技術についての備忘録となります。\\n今回はCircleCIについてです。</p>\\n<h2>CircleCIとは</h2>\\n<p>今流行りのCI/CDツールです。GitHub等のWebサービスと簡単に連携を行えます。\\n有料のプランもありますが、無料プランでもコンテナ1つで週毎に実行出来る処理の上限があるくらいで普通に使えるのでなので個人利用する分には無料プランで問題ないかと思います。</p>\\n<h2>プロジェクトのセットアップ</h2>\\n<p>今回はNuxt.jsで作成したプロジェクトのコンポーネント単体テストをCircleCI上で実行することを目的として進めていきます。\\nまずGitHubでリポジトリを作成、作業はdevelopブランチで行いますのでcheckoutします。\\nクローンしたのちにリポジトリのルートディレクトリに<code>app</code>というディレクトリを作成しましょう。\\n次に<code>app</code>ディレクトリ内にNuxt.jsのプロジェクトを作成します。リポジトリのルートディレクトリで以下のコマンドを実行します。</p>\\n<pre><code class=\\"hljs\\">yarn create nuxt-app app</code></pre><pre><code class=\\"hljs\\">...\\n\\n? Programming language:\\n  JavaScript\\n<span class=\\"hljs-meta\\">&gt;</span><span class=\\"bash\\"> TypeScript</span>\\n\\n...\\n\\n? Testing framework:\\n  None\\n<span class=\\"hljs-meta\\">&gt;</span><span class=\\"bash\\"> Jest</span>\\n  AVA\\n  WebdriverIO\\n  Nightwatch</code></pre><p>テスト用にJestを使用するのでそこの選択を忘れさえしなければ、基本的にEnter押し続けで大丈夫です。好みでTypeScriptを選択していますが、JavaScriptでも大丈夫です。あと以下の説明ではyarnを使用してますのでnpmを使用する場合はyarnをnpmに置き換えて読んでください。</p>\\n<p>Nuxt.jsのプロジェクト構築が完了したら、次にCircleCIの設定をしていきます。\\nリポジトリのルートディレクトリに<code>.circleci</code>というディレクトリを作成します。\\nさらにその中に<code>config.yml</code>というファイルを作成してください。これがCircleCI上でどのようなジョブを走らせるのか設定を追加していきます。</p>\\n<p>現状では以下のディレクトリ構成となります。</p>\\n<pre><code>root/\\n├ app/\\n    └ Nuxt.jsのプロジェクト\\n├ .circleci/\\n    └ config.yml\\n</code></pre>\\n<p>では、<code>config.yml</code>に以下のような設定を記載していきます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-attr\\">version:</span> <span class=\\"hljs-number\\">2</span>\\n<span class=\\"hljs-attr\\">jobs:</span>\\n  <span class=\\"hljs-attr\\">test:</span>\\n    <span class=\\"hljs-attr\\">docker:</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">image:</span> <span class=\\"hljs-string\\">circleci/node:14.15.3</span>\\n    <span class=\\"hljs-attr\\">steps:</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-string\\">checkout</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">restore_cache:</span>\\n          <span class=\\"hljs-attr\\">keys:</span>\\n            <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-string\\">yarn-{{</span> <span class=\\"hljs-string\\">checksum</span> <span class=\\"hljs-string\\">&quot;app/package.json&quot;</span> <span class=\\"hljs-string\\">}}</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">run:</span>\\n          <span class=\\"hljs-attr\\">name:</span> <span class=\\"hljs-string\\">yarn</span> <span class=\\"hljs-string\\">install</span>\\n          <span class=\\"hljs-attr\\">working_directory:</span> <span class=\\"hljs-string\\">app</span>\\n          <span class=\\"hljs-attr\\">command:</span> <span class=\\"hljs-string\\">yarn</span> <span class=\\"hljs-string\\">install</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">run:</span>\\n          <span class=\\"hljs-attr\\">name:</span> <span class=\\"hljs-string\\">test</span> <span class=\\"hljs-string\\">running</span>\\n          <span class=\\"hljs-attr\\">working_directory:</span> <span class=\\"hljs-string\\">app</span>\\n          <span class=\\"hljs-attr\\">command:</span> <span class=\\"hljs-string\\">yarn</span> <span class=\\"hljs-string\\">test</span>\\n<span class=\\"hljs-attr\\">workflows:</span>\\n  <span class=\\"hljs-attr\\">version:</span> <span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-attr\\">test:</span>\\n    <span class=\\"hljs-attr\\">jobs:</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">test:</span>\\n          <span class=\\"hljs-attr\\">filters:</span>\\n            <span class=\\"hljs-attr\\">branches:</span>\\n              <span class=\\"hljs-attr\\">only:</span>\\n                <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-string\\">develop</span></code></pre><p>jobsでは各ジョブでどのような処理を行うのか記載します。\\nworkflowsでは各ジョブがどのような条件下で実行されるのかを指定できます。\\n今回はdevelopブランチではtestが実行、mainブランチではなにも実行されないように指定しています。</p>\\n<h2>テストコード</h2>\\n<p>CircleCIとの連携を行う前にテストが通るか確認しておきましょう。\\nテスティングフレームワークにJestを選択した場合、以下のようなLogoコンポーネントの存在をチェックするテストコードが自動で作成されます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">import</span> { mount } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@vue/test-utils&#x27;</span>\\n<span class=\\"hljs-keyword\\">import</span> Logo <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@/components/Logo.vue&#x27;</span>\\n\\ndescribe(<span class=\\"hljs-string\\">&#x27;Logo&#x27;</span>, <span class=\\"hljs-function\\">() =&gt;</span> {\\n  test(<span class=\\"hljs-string\\">&#x27;is a Vue instance&#x27;</span>, <span class=\\"hljs-function\\">() =&gt;</span> {\\n    <span class=\\"hljs-keyword\\">const</span> wrapper = mount(Logo)\\n    expect(wrapper.vm).toBeTruthy()\\n  })\\n})</code></pre><p>ではappディレクトリ内でテストを実行してみます。\\nプロジェクト作成時にJestを設定してあるため、<code>yarn test</code>というコマンドでテストが実行できるよう<code>package.json</code>に追記されているはずです。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">$</span><span class=\\"bash\\"> yarn <span class=\\"hljs-built_in\\">test</span></span>\\nyarn run v1.19.1\\n<span class=\\"hljs-meta\\">$</span><span class=\\"bash\\"> jest</span>\\n PASS  test/Logo.spec.js\\n  Logo\\n    √ is a Vue instance (11 ms)\\n\\n-----------|---------|----------|---------|---------|-------------------\\nFile       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\\n-----------|---------|----------|---------|---------|-------------------\\nAll files  |       0 |      100 |     100 |       0 |\\n index.vue |       0 |      100 |     100 |       0 | 31\\n-----------|---------|----------|---------|---------|-------------------\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   0 total\\nTime:        7.361 s\\nRan all test suites.\\nDone in 9.78s.</code></pre><p>テストを無事に終えると以上のようにテスト結果がコンソール上に表示されます。</p>\\n<h2>CircleCIとの連携</h2>\\n<p>ローカルでの設定が一通り終わったら、一旦変更をpushしてリモートへ反映させておきましょう。\\nそれでは、ここからはGithubリポジトリとCircleCIを実際に連携させていきます。以下のurlにアクセスしてください。</p>\\n<p>https://circleci.com/</p>\\n<p>Sign Upから自身のGitHubアカウントとの連携を行ってください。\\n連携が完了すると、以下のようなDashboard画面へと遷移します。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/106350040-32582580-6316-11eb-8636-0cc73f6f7acb.png&quot; width=&quot;100%&quot; /&gt;</p>\\n<p>左上の赤枠で囲ってあるProjectsタブへ移動しましょう。このタブではリポジトリが一覧化されています。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/106350611-c2e43500-6319-11eb-877f-deaf13c0afb4.png&quot; width=&quot;100%&quot; /&gt;</p>\\n<p>連携させたいリポジトリの列の<code>Set Up Project</code>をクリックしましょう。\\nすると以下の画面へと遷移します。\\n画面上で記載のある通り、<code>config.yml</code>を用意しなくてもCircleCIの編集画面から直接設定をすることも出来ます。\\nしかし、今回は自前のconfig.ymlを用意しているので、<code>Use Existing Config</code>をクリックしておきましょう。\\nモーダルが表示されるはずなので、<code>Start Building</code>を選択します。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/106605275-0e117880-65a4-11eb-9b6d-826cea24e7ce.png&quot; width=&quot;100%&quot; /&gt;</p>\\n<p>これで連携は完了したのですが、おそらくsshキーの問題で最初の処理は走らないと思われます。\\n処理を強制的に走らせるために空コミットでも入れておきます。以下のコマンドで空コミットが作成出来るので、コミット後再度pushを行いましょう。</p>\\n<pre><code class=\\"hljs\\">git commit --allow-empty -m &quot;CircleCIを走らせるためのコミット&quot;</code></pre><p>するとpushに合わせて処理が走っているのがPipline画面から確認できます。\\n以下のように<code>Success</code>と表示されればCircleCI導入は無事終了です！</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/106605375-2c777400-65a4-11eb-8b34-50e13b1b8892.png&quot; width=&quot;100%&quot; /&gt;</p>\\n<p>developブランチの変更をmainブランチへと反映させたあと再度pushして処理が走るか確認してみてもいいでしょう。\\n<code>workflow</code>にてtestジョブはdevelopブランチでしか走らないように設定してあるので何も実行されないと思います。</p>\\n<h2>まとめ</h2>\\n<p>CI/CD...？難しそう...と最初は尻込みしてましたが、いざやってみると意外にも導入は簡単でした。\\n今回はテスト、本ブログではS3への自動デプロイまでしか行いませんでしたが、今後はVPSへの自動デプロイ等の処理組み込みにも挑戦してみたいと思います。</p>\\n<h2>参考</h2>\\n<ul>\\n<li>https://qiita.com/yushi_koga/items/667d962bff841acc3de1</li>\\n</ul>\\n","dir":"posts/json","base":"3-2021-01-21-circleci.json","ext":".json","sourceBase":"3-2021-01-21-circleci.md","sourceExt":".md"}')},371:function(n){n.exports=JSON.parse('{"id":4,"title":"グローバルなScssをVueファイルの中で読み込む","created_at":"2021-02-07T00:00:00.000Z","updated_at":"2021-02-07T00:00:00.000Z","description":"Scssのmixin使おうとしたらエラー吐かれた話","tags":"Scss, Nuxt.js","bodyContent":"## 問題\\r\\nhttps://www.tam-tam.co.jp/tipsnote/html_css/post10708.html\\r\\n\\r\\n上のサイトのようにメディアクエリをVueファイルの中で使用しようとすると以下のようなエラーが出てきました。環境はいつもの通りNuxt.jsです。\\r\\n\\r\\n```shell\\r\\nSassError: Undefined mixin.\\r\\n```\\r\\n\\r\\nどうやらmixinを定義したscssファイルの読み込みが上手くいってなかったらしいです。\\r\\n\\r\\n## 対処法\\r\\n```@nuxtjs/style-resources```を使用すれば解決します。\\r\\n\\r\\n```shell\\r\\nyarn add @nuxtjs/style-resources\\r\\n```\\r\\n\\r\\n```package.json```にはこれで追加されたので```nuxt.config.js```にも登録していきます。\\r\\n\\r\\n```javascript\\r\\nmodules: [\\r\\n\\t\'@nuxtjs/style-resources\'\\r\\n]\\r\\n```\\r\\n\\r\\nグローバルに使用したいscssファイルを```styleResources```に登録します。今回はメディアクエリ呼び出しに関する処理を```variables.scss```という名前のファイルに記載したのでパスは以下のようになりました。\\r\\n\\r\\n```javascript\\r\\nstyleResources: {\\r\\n    scss: [\\"~assets/variables.scss\\"]\\r\\n}\\r\\n```\\r\\n\\r\\n何番煎じの記事か分かったもんじゃないですが一応載せときます。","bodyHtml":"<h2>問題</h2>\\n<p>https://www.tam-tam.co.jp/tipsnote/html_css/post10708.html</p>\\n<p>上のサイトのようにメディアクエリをVueファイルの中で使用しようとすると以下のようなエラーが出てきました。環境はいつもの通りNuxt.jsです。</p>\\n<pre><code class=\\"hljs\\">SassError: Undefined mixin.</code></pre><p>どうやらmixinを定義したscssファイルの読み込みが上手くいってなかったらしいです。</p>\\n<h2>対処法</h2>\\n<p><code>@nuxtjs/style-resources</code>を使用すれば解決します。</p>\\n<pre><code class=\\"hljs\\">yarn add @nuxtjs/style-resources</code></pre><p><code>package.json</code>にはこれで追加されたので<code>nuxt.config.js</code>にも登録していきます。</p>\\n<pre><code class=\\"hljs\\">modules: [\\n\\t<span class=\\"hljs-string\\">&#x27;@nuxtjs/style-resources&#x27;</span>\\n]</code></pre><p>グローバルに使用したいscssファイルを<code>styleResources</code>に登録します。今回はメディアクエリ呼び出しに関する処理を<code>variables.scss</code>という名前のファイルに記載したのでパスは以下のようになりました。</p>\\n<pre><code class=\\"hljs\\">styleResources: {\\n    <span class=\\"hljs-attr\\">scss</span>: [<span class=\\"hljs-string\\">&quot;~assets/variables.scss&quot;</span>]\\n}</code></pre><p>何番煎じの記事か分かったもんじゃないですが一応載せときます。</p>\\n","dir":"posts/json","base":"4-2021-02-07-scssgrobal.json","ext":".json","sourceBase":"4-2021-02-07-scssgrobal.md","sourceExt":".md"}')},372:function(n){n.exports=JSON.parse('{"id":5,"title":"東海道ウォーキング(日本橋～品川宿)","created_at":"2021-04-05T00:00:00.000Z","updated_at":"2021-04-05T00:00:00.000Z","description":"東海道を歩きます。(日本橋～品川宿)","tags":"旅","bodyContent":"皆さん、コロナ下の自粛で疲弊していませんか？\\r\\n\\r\\n飲み会やカラオケ等大人数で集まることは良くないとされ、旅行ですら敬遠される状態ですよね。\\r\\n自分は旅行やキャンプなど外に出ることが割と好きなので疲弊しまくりです。\\r\\n\\r\\nそこで今回は三密に気を付けつつリフレッシュするべくして東海道を歩くことにしました。\\r\\nウォーキングは三密どころか気を付ければほぼ人と接触する機会が無くなるため、感染対策をしつつ、リフレッシュする最適な手段です。\\r\\n\\r\\n一度に東海道全行程を歩き切る訳ではなく、複数日に分けて歩きます。\\r\\nスタートは日本橋、ゴールは京都にある三条大橋、分けて歩くにあたって1区間を1宿間としました。\\r\\n宿とは東海道沿いにある江戸時代までの宿場町のことを指します。京都～日本橋で53個あるため東海道53次と呼ばれています。\\r\\n\\r\\n以降は1日目の行程である日本橋～品川宿を3月19日に歩いてきた記録となります。\\r\\n\\r\\n## 日本橋\\r\\n日本橋駅から地上に出てすぐ、日本橋のすぐ近くにこの日のスタート地点であり、国道の起点である日本国道路元標のレプリカが設置されています。\\r\\n歩道に置いてあるものはレプリカであり、残念ながら実物は車道のど真ん中にあります。イベント等交通規制がされているときにしかしっかりと見ることはできないようです。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113578360-a6d47b00-965d-11eb-9683-c649fd447b90.jpg\\" />\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113578579-fc108c80-965d-11eb-9958-5086b683080a.jpg\\" />\\r\\n\\r\\n京橋とかも有名なようですが写真は取り忘れました。\\r\\n\\r\\n銀座や浜松町周辺はこれと言った街道の名残のようなものがあまりなかったのと、人が多かったこともあり、足早に抜けました。\\r\\n\\r\\n## 高輪大木戸跡\\r\\nしばらく歩くと石垣の一部がぽつりと置いてあるのを発見しました。これが高輪大木戸跡です。\\r\\n江戸時代は江戸の南の入口として扱われていたようで旅人の送迎などが行われていたようですね。伊能忠敬が全国測量の起点にしたとも言われています。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113578743-4134be80-965e-11eb-893f-3e46f3ca2d03.jpg\\" />\\r\\n\\r\\n## 泉岳寺\\r\\nまたしばらく歩いたあと、街道沿いからは少し外れて坂を上ると泉岳寺が見えてきました。\\r\\nここは赤穂事件で有名な浅野長矩と赤穂浪士が葬られていることで有名らしいです。詳しい説明は長くなりそうなので割愛します。\\r\\n今回自分は行きませんでしたが赤穂義士記念館というのもあるようです。余裕のある方は行ってみてもいいかもしれません。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579040-b1dbdb00-965e-11eb-8163-984aa5664c22.jpg\\" />\\r\\n\\r\\n## 品川宿到着\\r\\n国道から少し逸れて旧街道に入ります。ここで少し迷いました...。\\r\\nまあ、うろうろしていればおそらく商店街のような場所にたどり着けると思います。なんとか辿りつけました。品川宿に到着です。今までの道とは異なり、随所に街道の名残を残そうとしている雰囲気を感じられました。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579330-1d25ad00-965f-11eb-9411-7b326c29e120.jpg\\" />\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579326-1bf48000-965f-11eb-9c75-e6048f8dfc4b.jpg\\" />\\r\\n\\r\\n\\r\\n## 品川宿本陣跡(聖蹟公園)\\r\\n商店街を歩いていくと商店街の端の方に公園があります。\\r\\nこの日の最終目的地へと到着しました。ここが品川宿本陣跡です。\\r\\n\\r\\n本陣とは宿場の中でも大名や役人などの権力者が泊まっていた格式高い宿のことを指します。\\r\\n今は品川宿本陣があった箇所は公園となっており、石碑が置かれるのみとなっています。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579493-5b22d100-965f-11eb-80f9-2890ad6c52ae.jpg\\" />\\r\\n\\r\\n## 品川神社\\r\\n本陣跡も見れたので今日はひとまず帰ろうかと思いましたが、帰るために北品川駅へ向かっていたところ、品川神社の前を通ったのでこちらにも行ってみました。東京十社にも指定されている有名な神社のようです。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579643-8d343300-965f-11eb-9bca-1c27dcf6c612.jpg\\" />\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579640-8c030600-965f-11eb-8447-b789bcb355c3.jpg\\" />\\r\\n\\r\\n神社への参拝も済ませ、北品川駅より帰路につきました。\\r\\n\\r\\n運動不足の影響もあり、後日ばっちり筋肉痛になりました。\\r\\n\\r\\n<img src=\\"https://user-images.githubusercontent.com/50108450/113579648-8f968d00-965f-11eb-8973-de7b32a80833.jpg\\" />\\r\\n\\r\\n## まとめ\\r\\n今回は約9キロ程度の距離であり、所要時間大体3時間半～4時間程度あればこなせる内容となっております。史跡や神社など見どころは他にも沢山あったのですが、全て見ようとしては歩き切るどころの話では無くなりそうだったので行くところはかなり絞って回りました。芝大神宮など調べるとすぐに出てくるような名所も抜かしました。\\r\\n\\r\\nというわけで今回は品川宿まで歩いたので、次回は品川宿～神奈川宿の一区間を歩きます。\\r\\n\\r\\nある程度体力が戻ってきた頃に二区間まとめて歩く予定です。","bodyHtml":"<p>皆さん、コロナ下の自粛で疲弊していませんか？</p>\\n<p>飲み会やカラオケ等大人数で集まることは良くないとされ、旅行ですら敬遠される状態ですよね。\\n自分は旅行やキャンプなど外に出ることが割と好きなので疲弊しまくりです。</p>\\n<p>そこで今回は三密に気を付けつつリフレッシュするべくして東海道を歩くことにしました。\\nウォーキングは三密どころか気を付ければほぼ人と接触する機会が無くなるため、感染対策をしつつ、リフレッシュする最適な手段です。</p>\\n<p>一度に東海道全行程を歩き切る訳ではなく、複数日に分けて歩きます。\\nスタートは日本橋、ゴールは京都にある三条大橋、分けて歩くにあたって1区間を1宿間としました。\\n宿とは東海道沿いにある江戸時代までの宿場町のことを指します。京都～日本橋で53個あるため東海道53次と呼ばれています。</p>\\n<p>以降は1日目の行程である日本橋～品川宿を3月19日に歩いてきた記録となります。</p>\\n<h2>日本橋</h2>\\n<p>日本橋駅から地上に出てすぐ、日本橋のすぐ近くにこの日のスタート地点であり、国道の起点である日本国道路元標のレプリカが設置されています。\\n歩道に置いてあるものはレプリカであり、残念ながら実物は車道のど真ん中にあります。イベント等交通規制がされているときにしかしっかりと見ることはできないようです。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113578360-a6d47b00-965d-11eb-9683-c649fd447b90.jpg&quot; /&gt;</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113578579-fc108c80-965d-11eb-9958-5086b683080a.jpg&quot; /&gt;</p>\\n<p>京橋とかも有名なようですが写真は取り忘れました。</p>\\n<p>銀座や浜松町周辺はこれと言った街道の名残のようなものがあまりなかったのと、人が多かったこともあり、足早に抜けました。</p>\\n<h2>高輪大木戸跡</h2>\\n<p>しばらく歩くと石垣の一部がぽつりと置いてあるのを発見しました。これが高輪大木戸跡です。\\n江戸時代は江戸の南の入口として扱われていたようで旅人の送迎などが行われていたようですね。伊能忠敬が全国測量の起点にしたとも言われています。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113578743-4134be80-965e-11eb-893f-3e46f3ca2d03.jpg&quot; /&gt;</p>\\n<h2>泉岳寺</h2>\\n<p>またしばらく歩いたあと、街道沿いからは少し外れて坂を上ると泉岳寺が見えてきました。\\nここは赤穂事件で有名な浅野長矩と赤穂浪士が葬られていることで有名らしいです。詳しい説明は長くなりそうなので割愛します。\\n今回自分は行きませんでしたが赤穂義士記念館というのもあるようです。余裕のある方は行ってみてもいいかもしれません。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579040-b1dbdb00-965e-11eb-8163-984aa5664c22.jpg&quot; /&gt;</p>\\n<h2>品川宿到着</h2>\\n<p>国道から少し逸れて旧街道に入ります。ここで少し迷いました...。\\nまあ、うろうろしていればおそらく商店街のような場所にたどり着けると思います。なんとか辿りつけました。品川宿に到着です。今までの道とは異なり、随所に街道の名残を残そうとしている雰囲気を感じられました。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579330-1d25ad00-965f-11eb-9411-7b326c29e120.jpg&quot; /&gt;</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579326-1bf48000-965f-11eb-9c75-e6048f8dfc4b.jpg&quot; /&gt;</p>\\n<h2>品川宿本陣跡(聖蹟公園)</h2>\\n<p>商店街を歩いていくと商店街の端の方に公園があります。\\nこの日の最終目的地へと到着しました。ここが品川宿本陣跡です。</p>\\n<p>本陣とは宿場の中でも大名や役人などの権力者が泊まっていた格式高い宿のことを指します。\\n今は品川宿本陣があった箇所は公園となっており、石碑が置かれるのみとなっています。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579493-5b22d100-965f-11eb-80f9-2890ad6c52ae.jpg&quot; /&gt;</p>\\n<h2>品川神社</h2>\\n<p>本陣跡も見れたので今日はひとまず帰ろうかと思いましたが、帰るために北品川駅へ向かっていたところ、品川神社の前を通ったのでこちらにも行ってみました。東京十社にも指定されている有名な神社のようです。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579643-8d343300-965f-11eb-9bca-1c27dcf6c612.jpg&quot; /&gt;</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579640-8c030600-965f-11eb-8447-b789bcb355c3.jpg&quot; /&gt;</p>\\n<p>神社への参拝も済ませ、北品川駅より帰路につきました。</p>\\n<p>運動不足の影響もあり、後日ばっちり筋肉痛になりました。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/113579648-8f968d00-965f-11eb-8973-de7b32a80833.jpg&quot; /&gt;</p>\\n<h2>まとめ</h2>\\n<p>今回は約9キロ程度の距離であり、所要時間大体3時間半～4時間程度あればこなせる内容となっております。史跡や神社など見どころは他にも沢山あったのですが、全て見ようとしては歩き切るどころの話では無くなりそうだったので行くところはかなり絞って回りました。芝大神宮など調べるとすぐに出てくるような名所も抜かしました。</p>\\n<p>というわけで今回は品川宿まで歩いたので、次回は品川宿～神奈川宿の一区間を歩きます。</p>\\n<p>ある程度体力が戻ってきた頃に二区間まとめて歩く予定です。</p>\\n","dir":"posts/json","base":"5-2021-04-05-tokaido-1.json","ext":".json","sourceBase":"5-2021-04-05-tokaido-1.md","sourceExt":".md"}')},373:function(n){n.exports=JSON.parse('{"id":6,"title":"GoでServerless Framework入門","created_at":"2021-06-14T00:00:00.000Z","updated_at":"2021-06-14T00:00:00.000Z","description":"AWSのLambda、Amazon API Gatewayを使ってAPIを生やそうとした際、Serverless Frameworkに入門したお話","tags":"Go, Serverless Framework, AWS, Lambda, Amazon API Gateway","bodyContent":"## はじめに\\r\\n\\r\\n今回の記事はAWSのLambda、Amazon API Gatewayを使ってAPIを生やそうとした際、Serverless Frameworkに入門した記録です。Serverless Frameworkとはサーバレスアプリケーションの構築、デプロイを手軽に行えるようにするためのNode.js製のフレームワークです。今回はAWSを使用しますが、AzureやGCP等のクラウドサービスにも対応しています。\\r\\n\\r\\nこの記事では、Serverless Frameworkを導入し、Goの基本的なアプリケーションをAWSへデプロイするところまで行います。\\r\\n\\r\\n## 事前準備\\r\\n\\r\\nServerless Frameworkを導入するにはnpmが必要となるので事前にインストールしておく必要があります。また、今回のようにAWSを使用する場合はAWS CLIも事前に導入しておく必要があります。\\r\\n\\r\\nAWS CLIの導入が終わったら、AWSコンソールにて`AdministratorAccess`ポリシーを付与したIAMユーザを事前に作成し、以下のように`~/.aws/credentials`に追記しておきます。\\r\\n\\r\\n```bash\\r\\n[profile名]\\r\\naws_access_key_id = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\r\\naws_secret_access_key = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\r\\n```\\r\\n\\r\\n## 導入\\r\\n\\r\\n事前準備が完了したら、Serverless Frameworkのインストールを行います。\\r\\n\\r\\nまず、Serverless Frameworkで用意されているテンプレートを元にプロジェクトを作成します。今回はパッケージ管理に`go module`を使用するため、テンプレートに`aws-go-mod`を指定します。\\r\\n\\r\\nAWS上でGoを使用するテンプレートは以下の3つが提供されています。\\r\\n\\r\\n- aws-go\\r\\n- aws-go-dep\\r\\n- aws-go-mod ← 今回使う\\r\\n\\r\\nそれ以外のテンプレートはリファレンスの以下のページにまとめられています。\\r\\n\\r\\n[https://www.serverless.com/framework/docs/providers/aws/cli-reference/create/](https://www.serverless.com/framework/docs/providers/aws/cli-reference/create/)\\r\\n\\r\\nテンプレートからプロジェクトを作成した後、`make`を使用して実行ファイルを作成しますが、Windows環境では標準でmakeが使えません。Windows環境の方は以下の記事にて導入方法が紹介されていますので、こちらを参考にしつつmakeを導入しておきましょう。\\r\\n\\r\\n[https://qiita.com/tokikaze0604/items/e13c04192762f8d4ec85](https://qiita.com/tokikaze0604/items/e13c04192762f8d4ec85)\\r\\n\\r\\n（`serverless`のエイリアスとして`sls`が登録されているので以降はこちらを使用します。）\\r\\n\\r\\n```bash\\r\\nsls create -t aws-go-mod -p <project名>\\r\\n\\r\\ncd <project名>\\r\\n\\r\\nmake build\\r\\n```\\r\\n\\r\\n以下のコマンドでデプロイを行います。\\r\\n\\r\\n```bash\\r\\nsls deploy --aws-profile <profile名>\\r\\n```\\r\\n\\r\\nsls createにて生成されたディレクトリに`serverless.yml`というファイルがあるかと思いますが、そのファイル中で以下のような記述があるはずです。ここではどのエンドポイントにアクセスしたらどのLambda関数が呼び出されるのかということが定義してあります。\\r\\n\\r\\n```yaml\\r\\nfunctions:\\r\\n  hello:\\r\\n    handler: bin/hello\\r\\n    events:\\r\\n      - http:\\r\\n          path: /hello\\r\\n          method: get\\r\\n```\\r\\n\\r\\n次のコマンドで上記のLambda関数のデプロイが正常に行われているかチェックしましょう。ここではhelloを呼び出してみます。\\r\\n\\r\\n```bash\\r\\nserverless invoke -f hello\\r\\n```\\r\\n\\r\\nデプロイが正常に完了していれば以下のように出力が行われます。\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"statusCode\\": 200,\\r\\n    \\"headers\\": {\\r\\n        \\"Content-Type\\": \\"application/json\\",\\r\\n        \\"X-MyCompany-Func-Reply\\": \\"hello-handler\\"\\r\\n    },\\r\\n    \\"body\\": \\"{\\\\\\"message\\\\\\":\\\\\\"Go Serverless v1.0! Your function executed successfully!\\\\\\"}\\"\\r\\n}\\r\\n```\\r\\n\\r\\nデプロイとLambda関数の実行まで行えたので、本編はここまでとなります。余裕があれば、Amazon API Gatewayで作成されたエンドポイントにも直接アクセスして確認してみましょう。\\r\\n\\r\\n## 余談\\r\\n\\r\\n今回の記事では導入までしか行いませんでしたが、今後、データの保存のためDynamoDB等の別サービスと連携を行う機会があると思います。その場合に気を付けることを余談として少しだけ書いておきます。\\r\\n\\r\\nまず1点目、以下の記事でも紹介されているように`sls`にてデプロイを行ったアプリケーションに関しては、ローカルのIAMロールが適用されるのではなく、`Cloud Watch Logs`への読み書き権限しか付与されません。\\r\\n\\r\\n[https://pyteyon.hatenablog.com/entry/2019/08/08/224047#AWS-Lambda-に登録した関数の権限エラー](https://pyteyon.hatenablog.com/entry/2019/08/08/224047#AWS-Lambda-%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E9%96%A2%E6%95%B0%E3%81%AE%E6%A8%A9%E9%99%90%E3%82%A8%E3%83%A9%E3%83%BC)\\r\\n\\r\\n[https://www.serverless.com/framework/docs/providers/aws/guide/iam/](https://www.serverless.com/framework/docs/providers/aws/guide/iam/)\\r\\n\\r\\nそのため、DynamoDB等別サービスと連携させる際は、`serverless.yml`へポリシーを追加しておく必要があります。`serverless.yml`の`provider`を以下のように書き換えてポリシーを2つほど加えます。\\r\\n\\r\\n```yaml\\r\\nprovider:\\r\\n  （略）\\r\\n  iam:\\r\\n    role:\\r\\n      managedPolicies:\\r\\n        - \'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\'\\r\\n        - \'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole\'\\r\\n```\\r\\n\\r\\n上記のポリシーはDynamoDBと連携させる際の例ですので、また他のサービスと連携を行う際はその都度必要なポリシーに書き換えてる必要があります。\\r\\n\\r\\n最後にもう一点、これも詰まるポイントかもしれませんが、記事にしてくださっている方がいたので、自分は時間を掛けずに済みました。ここで紹介しておきます。\\r\\n\\r\\nその記事とは以下のモノですが、`serverless.yml`に`integration: lambda`を記載してはいけないという事が書いてありました。これを書いてしまうとHandlerの中まで処理が到達しません。\\r\\n\\r\\n[https://note.com/mueditech/n/n4e3f67fa68a0](https://note.com/mueditech/n/n4e3f67fa68a0)\\r\\n\\r\\n## 終わりに\\r\\n\\r\\n忘れないうちに書こうと思って書き殴った内容となっているので、文章がおかしいところがあるかもしれません。時間があるときに直しておきます。\\r\\n\\r\\n## 参考記事\\r\\n\\r\\n[https://www.serverless.com/blog/framework-example-golang-lambda-support](https://www.serverless.com/blog/framework-example-golang-lambda-support)\\r\\n\\r\\n[https://serverless.co.jp/blog/25/](https://serverless.co.jp/blog/25/)\\r\\n\\r\\n[https://kdnakt.hatenablog.com/entry/2018/08/01/080000](https://kdnakt.hatenablog.com/entry/2018/08/01/080000)","bodyHtml":"<h2>はじめに</h2>\\n<p>今回の記事はAWSのLambda、Amazon API Gatewayを使ってAPIを生やそうとした際、Serverless Frameworkに入門した記録です。Serverless Frameworkとはサーバレスアプリケーションの構築、デプロイを手軽に行えるようにするためのNode.js製のフレームワークです。今回はAWSを使用しますが、AzureやGCP等のクラウドサービスにも対応しています。</p>\\n<p>この記事では、Serverless Frameworkを導入し、Goの基本的なアプリケーションをAWSへデプロイするところまで行います。</p>\\n<h2>事前準備</h2>\\n<p>Serverless Frameworkを導入するにはnpmが必要となるので事前にインストールしておく必要があります。また、今回のようにAWSを使用する場合はAWS CLIも事前に導入しておく必要があります。</p>\\n<p>AWS CLIの導入が終わったら、AWSコンソールにて<code>AdministratorAccess</code>ポリシーを付与したIAMユーザを事前に作成し、以下のように<code>~/.aws/credentials</code>に追記しておきます。</p>\\n<pre><code class=\\"hljs\\">[profile名]\\naws_access_key_id = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\naws_secret_access_key = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre><h2>導入</h2>\\n<p>事前準備が完了したら、Serverless Frameworkのインストールを行います。</p>\\n<p>まず、Serverless Frameworkで用意されているテンプレートを元にプロジェクトを作成します。今回はパッケージ管理に<code>go module</code>を使用するため、テンプレートに<code>aws-go-mod</code>を指定します。</p>\\n<p>AWS上でGoを使用するテンプレートは以下の3つが提供されています。</p>\\n<ul>\\n<li>aws-go</li>\\n<li>aws-go-dep</li>\\n<li>aws-go-mod ← 今回使う</li>\\n</ul>\\n<p>それ以外のテンプレートはリファレンスの以下のページにまとめられています。</p>\\n<p><a href=\\"https://www.serverless.com/framework/docs/providers/aws/cli-reference/create/\\">https://www.serverless.com/framework/docs/providers/aws/cli-reference/create/</a></p>\\n<p>テンプレートからプロジェクトを作成した後、<code>make</code>を使用して実行ファイルを作成しますが、Windows環境では標準でmakeが使えません。Windows環境の方は以下の記事にて導入方法が紹介されていますので、こちらを参考にしつつmakeを導入しておきましょう。</p>\\n<p><a href=\\"https://qiita.com/tokikaze0604/items/e13c04192762f8d4ec85\\">https://qiita.com/tokikaze0604/items/e13c04192762f8d4ec85</a></p>\\n<p>（<code>serverless</code>のエイリアスとして<code>sls</code>が登録されているので以降はこちらを使用します。）</p>\\n<pre><code class=\\"hljs\\">sls create -t aws-go-mod -p &lt;project名&gt;\\n\\n<span class=\\"hljs-built_in\\">cd</span> &lt;project名&gt;\\n\\nmake build</code></pre><p>以下のコマンドでデプロイを行います。</p>\\n<pre><code class=\\"hljs\\">sls deploy --aws-profile &lt;profile名&gt;</code></pre><p>sls createにて生成されたディレクトリに<code>serverless.yml</code>というファイルがあるかと思いますが、そのファイル中で以下のような記述があるはずです。ここではどのエンドポイントにアクセスしたらどのLambda関数が呼び出されるのかということが定義してあります。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-attr\\">functions:</span>\\n  <span class=\\"hljs-attr\\">hello:</span>\\n    <span class=\\"hljs-attr\\">handler:</span> <span class=\\"hljs-string\\">bin/hello</span>\\n    <span class=\\"hljs-attr\\">events:</span>\\n      <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-attr\\">http:</span>\\n          <span class=\\"hljs-attr\\">path:</span> <span class=\\"hljs-string\\">/hello</span>\\n          <span class=\\"hljs-attr\\">method:</span> <span class=\\"hljs-string\\">get</span></code></pre><p>次のコマンドで上記のLambda関数のデプロイが正常に行われているかチェックしましょう。ここではhelloを呼び出してみます。</p>\\n<pre><code class=\\"hljs\\">serverless invoke -f hello</code></pre><p>デプロイが正常に完了していれば以下のように出力が行われます。</p>\\n<pre><code class=\\"hljs\\">{\\n    <span class=\\"hljs-attr\\">&quot;statusCode&quot;</span>: <span class=\\"hljs-number\\">200</span>,\\n    <span class=\\"hljs-attr\\">&quot;headers&quot;</span>: {\\n        <span class=\\"hljs-attr\\">&quot;Content-Type&quot;</span>: <span class=\\"hljs-string\\">&quot;application/json&quot;</span>,\\n        <span class=\\"hljs-attr\\">&quot;X-MyCompany-Func-Reply&quot;</span>: <span class=\\"hljs-string\\">&quot;hello-handler&quot;</span>\\n    },\\n    <span class=\\"hljs-attr\\">&quot;body&quot;</span>: <span class=\\"hljs-string\\">&quot;{\\\\&quot;message\\\\&quot;:\\\\&quot;Go Serverless v1.0! Your function executed successfully!\\\\&quot;}&quot;</span>\\n}</code></pre><p>デプロイとLambda関数の実行まで行えたので、本編はここまでとなります。余裕があれば、Amazon API Gatewayで作成されたエンドポイントにも直接アクセスして確認してみましょう。</p>\\n<h2>余談</h2>\\n<p>今回の記事では導入までしか行いませんでしたが、今後、データの保存のためDynamoDB等の別サービスと連携を行う機会があると思います。その場合に気を付けることを余談として少しだけ書いておきます。</p>\\n<p>まず1点目、以下の記事でも紹介されているように<code>sls</code>にてデプロイを行ったアプリケーションに関しては、ローカルのIAMロールが適用されるのではなく、<code>Cloud Watch Logs</code>への読み書き権限しか付与されません。</p>\\n<p><a href=\\"https://pyteyon.hatenablog.com/entry/2019/08/08/224047#AWS-Lambda-%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%9F%E9%96%A2%E6%95%B0%E3%81%AE%E6%A8%A9%E9%99%90%E3%82%A8%E3%83%A9%E3%83%BC\\">https://pyteyon.hatenablog.com/entry/2019/08/08/224047#AWS-Lambda-に登録した関数の権限エラー</a></p>\\n<p><a href=\\"https://www.serverless.com/framework/docs/providers/aws/guide/iam/\\">https://www.serverless.com/framework/docs/providers/aws/guide/iam/</a></p>\\n<p>そのため、DynamoDB等別サービスと連携させる際は、<code>serverless.yml</code>へポリシーを追加しておく必要があります。<code>serverless.yml</code>の<code>provider</code>を以下のように書き換えてポリシーを2つほど加えます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-attr\\">provider:</span>\\n  <span class=\\"hljs-string\\">（略）</span>\\n  <span class=\\"hljs-attr\\">iam:</span>\\n    <span class=\\"hljs-attr\\">role:</span>\\n      <span class=\\"hljs-attr\\">managedPolicies:</span>\\n        <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-string\\">&#x27;arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess&#x27;</span>\\n        <span class=\\"hljs-bullet\\">-</span> <span class=\\"hljs-string\\">&#x27;arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole&#x27;</span></code></pre><p>上記のポリシーはDynamoDBと連携させる際の例ですので、また他のサービスと連携を行う際はその都度必要なポリシーに書き換えてる必要があります。</p>\\n<p>最後にもう一点、これも詰まるポイントかもしれませんが、記事にしてくださっている方がいたので、自分は時間を掛けずに済みました。ここで紹介しておきます。</p>\\n<p>その記事とは以下のモノですが、<code>serverless.yml</code>に<code>integration: lambda</code>を記載してはいけないという事が書いてありました。これを書いてしまうとHandlerの中まで処理が到達しません。</p>\\n<p><a href=\\"https://note.com/mueditech/n/n4e3f67fa68a0\\">https://note.com/mueditech/n/n4e3f67fa68a0</a></p>\\n<h2>終わりに</h2>\\n<p>忘れないうちに書こうと思って書き殴った内容となっているので、文章がおかしいところがあるかもしれません。時間があるときに直しておきます。</p>\\n<h2>参考記事</h2>\\n<p><a href=\\"https://www.serverless.com/blog/framework-example-golang-lambda-support\\">https://www.serverless.com/blog/framework-example-golang-lambda-support</a></p>\\n<p><a href=\\"https://serverless.co.jp/blog/25/\\">https://serverless.co.jp/blog/25/</a></p>\\n<p><a href=\\"https://kdnakt.hatenablog.com/entry/2018/08/01/080000\\">https://kdnakt.hatenablog.com/entry/2018/08/01/080000</a></p>\\n","dir":"posts/json","base":"6-2021-06-14-serverless-go.json","ext":".json","sourceBase":"6-2021-06-14-serverless-go.md","sourceExt":".md"}')},374:function(n){n.exports=JSON.parse('{"id":7,"title":"お前もサウナーにならないか？","created_at":"2021-12-13T00:00:00.000Z","updated_at":"2021-12-13T00:00:00.000Z","description":"サウナ入門","tags":"サウナ","bodyContent":"この記事は[TCU-CTRL場外乱闘 Advent Calendar 2021](https://adventar.org/calendars/7000) 13日目の記事です。\\n\\n前回の記事はこちら\\n\\n[マイクロ・コンピュータの世界](https://multireact.hatenablog.com/entry/2021/12/11/153344)\\n\\n\\n<br>\\n<br>\\n<br>\\n世間は未曾有のサウナブーム！\\n<br>\\n<br>\\n<br>\\n実は今年の流行語大賞に「ととのう」がノミネートされるほどの盛況ぶりなんです。\\n\\n実際、1~2年前と比べてどこのサウナも圧倒的混み具合な気がしてます。\\n世間にサウナの素晴らしさに気づいてもらえた嬉しさ反面、コロナ情勢も相まって入りにくくなってしまった悲しさ反面ってところではあります。\\n\\nということで今回の記事で、一人でも多くの人類にサウナの素晴らしさを知ってもらい、このブームを加速させられればと思ってます。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705329-c800cce8-34fe-45aa-8822-266a0a998ee9.png\\" width=\\"35%\\" />\\n\\n<br>\\n<br>\\n\\n## 疲れ果てた現代人こそサウナに入るべし\\n\\n現代人の中で常に仕事のことを考えてしまうという人は少なくないでしょう。そんなことを四六時中してしまっては脳が疲れきってしまいます。\\n\\n嫌なことを忘れるために飲酒、就寝、アルコールの影響で熟睡ができず、日中眠気が襲ってきて進捗が悪くなる...という悪循環も社会のどこかにはあるのかもしれません。\\n\\nそんな方々（そんな方々じゃなくても）は是非ともサウナへ行きましょう。\\n\\nサウナ室内は気温が100℃前後ということもあり、人体にとって危険な環境です。そのため、強制的に思考がままならない状態に至ることが出来ます。この思考停止した状態が結果的に脳を休ませることになり、脳の疲れを取ることが出来ます。脳疲労が取れた結果、熟睡できること間違いなしです。\\n\\n仕事とか関係なく、普通にメンタルが弱ってる人全般にもサウナはおすすめです。サウナへ入ることでメンタルを安定させることが期待できます。\\n\\nLowryらの研究[1]では、サウナに入ることでセロトニン分泌が促され、不安やストレス関連の神経障害の改善において重要な役割を果たすことが示されています。（セロトニンとはいわゆる幸福物質と巷で言われているもので、セロトニンが不足することで慢性的ストレスだったり、意欲低下、鬱症状がみられるようになります。）\\n\\nということで最近鬱っぽいんだよね...って人はとりあえず何も考えずに銭湯へ行きましょう。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705328-e54e2567-bc3e-4ce8-bf58-3d8d6d1df6e7.png\\" width=\\"25%\\" />\\n\\n<br>\\n<br>\\n\\n## 健康にもいい？\\n\\nこれまでメンタル面でのメリットを出してきましたが、もちろん肉体面でもサウナは大いにメリットがあります。\\n\\n当たり前のようですが、高温環境にいることで血流の増加が促され、疲労回復に繋がります。\\n\\n短期的な大きなメリットは疲労回復に留まりますが、継続的にサウナへ赴くことにより心血管疾患への罹患率を低下させられることが示唆されています[2]。（リウマチ、COPD等々への改善効果もあるようですが、この辺を個別に紹介していたらキリがなさそうなのでやめておきます。）\\n\\nメリットばかり述べられてるけど、サウナって健康リスクあるんじゃない...？って噂もたまに見かけますが、小児期から老年期まで健康な人へ健康リスクをもたらすことはないとする研究結果もあるのでそこは大丈夫だと思います[3]。（これはあくまでも健康な人の話であるため、高血圧等何かしらの心血管疾患をお持ちの方は医者に確認をとったうえでサウナにいってください。）\\n\\n<br>\\n\\n## ととのうが分からない？\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705330-58223fb3-c1a4-4a58-8c5c-585927d899cf.png\\" width=\\"35%\\" />\\n\\n銭湯に行った時、外に置いてある椅子とかでボケ〜ってしてる人いませんか。あれ、ととのってるんですね。あれがいわゆる「ととのい」なんですね。\\n\\n<br>\\n<br>\\n<br>\\nサウナからの外気浴で得られたリラックス状態を「ととのう」と言います。\\n\\nサウナーの人と話すとこのワードたまに出てきませんか？そんな時、ととのうってなんなの？って聞くと「脳が溶ける」とか「無我の境地」、「次元を超える」とか要領を得ない返答が返ってくることが多いはずです。\\n\\n<br>\\nサウナーはこのととのいを得るためにサウナへ赴きます。\\n\\n<br>\\n<br>\\nこのととのいを体験して欲しく、人にサウナを進めても「や、暑いの嫌いなんだよねー」って返されてしまうことが多いです。\\n\\n自分も暑いのは嫌いですよ。サウナ好きは皆が暑いのが好きってわけではないんですよ。もしそうだったらただの変態集団になってしまう気がするんですけど、どうなんでしょうか。\\n\\nこの暑いから嫌っていう人は、サウナの「暑い」の部分しか体験してないからそうなるんじゃないかと思います。\\n\\nそういった人は大抵水風呂等で体を冷ますこともせずに半身浴へ突入したりそのまま浴場から上がってしまったりしますよね。\\n\\n体の芯から温まれてないので外気浴はおろか水風呂に入るのなんて寒いだけなのでととのうことも出来ない、そんな体験してしまったらサウナが苦手になってしまうのも少しわかる気がします。\\n\\n<br>\\n\\n## ととのいを得る\\n\\nととのうためには水風呂も外気浴も必須要素となります。\\n\\nまず、サウナ後に水風呂へ入ることで交感神経が活発になり、アドレナリンが放出されます。その後、外気浴によって副交感神経が活発になるのですが、この時、アドレナリンは残っているのに体はリラックスしているというなんとも奇妙な状態へと至ります。これがいわゆるととのっているという状態になります。\\n\\nなので、ととのうためにはサウナ→水風呂→外気浴という流れ全体が重要となっているのです。\\n\\n<br>\\n\\n## 初心者向けサウナルーティン\\n\\nここまで読んでくださった方はもうサウナに行きたくてウズウズしていることでしょう。簡単にではありますが、ととのいを得るための一般的な流れを紹介します。\\n\\n1. 洗体\\n    \\n    とりあえず身体を洗っておきましょう。これによって発汗がより効率的に行えるようになり、よりサウナを楽しめるようになります。\\n    \\n2. サウナ\\n    \\n    身体の水気を拭き取った後、サウナ室へ入り発汗を行います。体温、心拍数が徐々に上昇することを感じましょう。もしできそうであれば体育座りやあぐらをかきましょう（混んでる時は控えてください）。頭から足までの高低差をできるだけ小さくすることでよりスムーズに血流の増加を促せます。\\n    \\n    大体5~10分経ったら十分です。もし時間ではなく、心拍数を目安にできるのであれば、通常時の2倍ほどの心拍数で出ると良さそうです。\\n    \\n    サウナ室は一般的に上段に上がれば上がるほど気温が上昇します。好みの気温を見つけるのも楽しみの一つかもしれません。\\n    \\n3. 水風呂\\n    \\n    掛け湯やシャワーで汗を流してから水風呂に入りましょう。いきなり水風呂に入るのが怖いという方はシャワーである程度身体を冷ましてから入ってもいいかもしれないです。入る長さですが、長い時間入ればいいというものでもないです。30~60秒くらいで身体の表面がしっかりと冷めたと感じるタイミングで出ればいいと思います。\\n    \\n    水風呂の水温ですが、20度前後であれば、割と柔らかめな印象です。水風呂に入るのが苦手という方は水温20度前後を目安にサウナを探すといいかもしれないです。\\n    \\n4. 外気浴\\n\\n    椅子に座ったり、横になれるスペースがあれば横になったりして、熱った身体を冷まし、ととのいを満喫しましょう。\\n    \\n    （サウナがある銭湯であれば大抵の場所は外気浴スペースがあったりしますが、場所によってはサウナはあるのに外気浴スペースがないとこもあるので注意）\\n    \\n    外気浴を終えたらちゃんと水分補給を行うようにしてください。\\n    \\nこれらのサウナ → 水風呂 → 外気浴を１セットとして繰り返し行います。例として自分の平均的なサ活を載せておきます。\\n\\n- サウナ: 8分 × 4（心拍数によって変わる）\\n- 水風呂: 1分 × 4\\n- 外気浴: 5分 × 4\\n\\nこの繰り返しの中で、湯船に浸かるのはあまりお勧めできません。ととのいの項でも述べた通り、急激な環境の変化によってととのいが得られるのであって、このリズムを崩してしまっては中途半端にしかととのえなくなってしまいます。\\n\\n<br>\\n\\n## サウナに入るマナー\\n\\n一応サウナに入る時のマナーというものが存在します。一応紹介はしますが、普通に周りの迷惑にならないように気をつければ大丈夫なはずです。\\n    \\n- サウナに入る前には水気を取る\\n    \\n    サウナに入る前にはある程度の水気を拭き取っておきましょう。汚いものではないでしょうが、サウナマットがべちょべちょになっていて気持ちのいい人なんていません。後から入る人のためにも水気をとってから入ることを心がけましょう。\\n    \\n- 汗を飛ばさない\\n\\n    サウナ室内で汗を拭き取ってペッペッと飛ばす人がたまにいます。嘘かもしれませんが、ほんとにいます。不愉快なので控えましょう。移動時に飛ぶ分は仕方ないと思います。そこは寛大になりましょう。\\n\\n- サウナ室内で大声で話さない\\n\\n    そもそもコロナ禍ということもありどこも默浴を徹底されているので気にするまでもなさそうですが。\\n\\n    狭いサウナ室内でワイワイ騒がれたら普通に迷惑ですよね。控えましょう。\\n\\n- 水風呂に入る前に汗を流す\\n\\n    これも当然と言えば当然ですね。身体への負担を低減させるという意味でも必要です。\\n\\n- 整い椅子に掛け湯する\\n\\n    掛け湯OKな場所であれば、いいマナーとされるはずです。椅子を使い終わった後は椅子に掛け湯をすることで後の人がより気持ちよく椅子を使えるようになります。\\n\\n    ただ、場所によっては掛け湯禁止の銭湯もあるので、事前に調べておいた方が良さそうです。\\n\\n<br>\\n\\n## サ活を加速させるグッズ類\\n\\nこれまでサウナ活動いわゆるサ活の基本に触れてきましたが、ここからはよりサ活を有意義なものへとするためのグッズを紹介します。（サウナハット等もあると思いますが、自分が使用してるものしか紹介してません）\\n\\n### サウナを出るタイミングは心拍数で図る\\n\\nサウナ室内に設置してある12分計や砂時計を目安に出るタイミングを伺う人は多いかと思います。しかし、それだと時と場合によっては最高のととのいが得られないかもしれません。\\n\\n<br>\\n<br>\\nQ . 常に最高のととのいを得るにはどうしたらいいか？\\n\\n<br>\\nA . サウナを出るタイミングは心拍数を目安にするようにしましょう。\\n\\n<br>\\n<br>\\nということで自分はスマートウォッチを導入しました。\\n\\n自分はMi bandを使用しています。サウナ用に導入したのは割と最近ですが、今のところ壊れる様子はありません。まあ5000円くらいですので壊れてもショックは大きくありません。\\n\\nMi bandの場合ですが、ワークアウト計測モードにすることで心拍数を常時確認できるようになります（記録も残るので便利です）（下の画像はある日のサ活）。\\n\\nこういった記録を重ねることで大体これくらいの心拍数で水風呂に入ればいい感じにととのえるなというのが分かるようになります。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705371-edf62458-1821-48a4-9320-04e740e0fed8.png\\" width=\\"50%\\" />\\n\\n### 近視の人でも安心\\n\\nサウナ室内では基本的にはメガネは外します。（じゃないとメガネのコーティングが剥がれてしまいます）\\n\\nだけど、メガネ無いとマジで周り見えないんだわ、サウナ内でテレビ見たいんだわって人もいると思います。\\n\\nそんな人にはサウナメガネがおすすめです。\\n\\n細かい度数は設定できませんが、-3.00、-5.00といったようにある程度の間隔で度数バリエーションが用意されています。\\n\\n値段も2000円前後~とお手頃なため、気になる方はとりあえず導入してみるのがいいかもしれないです。amazonとかで売ってます。\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705559-300f2ae9-3ff9-403c-b721-7cbe38d07042.png\\" width=\\"50%\\" />\\n\\n<br>\\n<br>\\n\\n## 健康のためである必要はない\\n\\nサウナに入り、健康体になって帰る。次の日が平日ならそれでもいいかもしれないです。\\n\\nけど、次の日が休日なら？銭湯に食事処が併設されていたら...？\\n\\n<img src=\\"https://user-images.githubusercontent.com/50108450/145705474-59bf7e0f-8380-4b49-97b8-ab7973707aec.png\\" width=\\"40%\\" />\\n\\n人とは矛盾の中で生きる生き物なんです。ビールを飲んで生を実感しましょう。\\n\\n<br>\\n\\n## 最後に\\nこれまでツラツラとサウナのいいところを書いてきましたが、結局のところ、言葉じゃ伝わらないと思うので、是非一度サウナに行って体感してみてください。\\n\\nリモートではなく、物理出社している社会人の方に限定されますが、なんと帰り際に寄ることでサウナまでの交通費をかけずにサウナに行けます。サウナまでの交通費がタダになる！？もう行くしかないですよね。（これだけで物理出社するモチベーションも湧いてきませんか？僕はこれだけでも物理出社する日が楽しみになりました）\\n\\n<br>\\n<br>\\n<br>\\n<br>\\nとまあ、この記事で興味を持って、今後一人でもサウナーが誕生してくれると嬉しい限りです。\\n\\n次回は15日の [ふかふかさん](https://adventar.org/users/48634)の記事です。\\nよろしくお願いします。\\n\\n<br>\\n<br>\\n<br>\\n\\n## 参考文献\\n\\n[1] Lowry CA, Lightman SL, Nutt DJ. That warm fuzzy feeling: brain serotonergic neurons and the regulation of emotion. J Psychopharmacol. 2009 Jun;23(4):392-400.\\n\\n[2] Joy Hussain, Marc Cohen, \\"Clinical Effects of Regular Dry Sauna Bathing: A Systematic Review\\", *Evidence-Based Complementary and Alternative Medicine*, vol. 2018, Article ID 1857413, 30 pages, 2018.\\n\\n[3] Katriina Kukkonen-Harjula & Kyllikki Kauppinen (2006) Health effects and risks of sauna bathing, International Journal of Circumpolar Health, 65:3, 195-205","bodyHtml":"<p>この記事は<a href=\\"https://adventar.org/calendars/7000\\">TCU-CTRL場外乱闘 Advent Calendar 2021</a> 13日目の記事です。</p>\\n<p>前回の記事はこちら</p>\\n<p><a href=\\"https://multireact.hatenablog.com/entry/2021/12/11/153344\\">マイクロ・コンピュータの世界</a></p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;\\n世間は未曾有のサウナブーム！\\n&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;\\n実は今年の流行語大賞に「ととのう」がノミネートされるほどの盛況ぶりなんです。</p>\\n<p>実際、1~2年前と比べてどこのサウナも圧倒的混み具合な気がしてます。\\n世間にサウナの素晴らしさに気づいてもらえた嬉しさ反面、コロナ情勢も相まって入りにくくなってしまった悲しさ反面ってところではあります。</p>\\n<p>ということで今回の記事で、一人でも多くの人類にサウナの素晴らしさを知ってもらい、このブームを加速させられればと思ってます。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705329-c800cce8-34fe-45aa-8822-266a0a998ee9.png&quot; width=&quot;35%&quot; /&gt;</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;</p>\\n<h2>疲れ果てた現代人こそサウナに入るべし</h2>\\n<p>現代人の中で常に仕事のことを考えてしまうという人は少なくないでしょう。そんなことを四六時中してしまっては脳が疲れきってしまいます。</p>\\n<p>嫌なことを忘れるために飲酒、就寝、アルコールの影響で熟睡ができず、日中眠気が襲ってきて進捗が悪くなる...という悪循環も社会のどこかにはあるのかもしれません。</p>\\n<p>そんな方々（そんな方々じゃなくても）は是非ともサウナへ行きましょう。</p>\\n<p>サウナ室内は気温が100℃前後ということもあり、人体にとって危険な環境です。そのため、強制的に思考がままならない状態に至ることが出来ます。この思考停止した状態が結果的に脳を休ませることになり、脳の疲れを取ることが出来ます。脳疲労が取れた結果、熟睡できること間違いなしです。</p>\\n<p>仕事とか関係なく、普通にメンタルが弱ってる人全般にもサウナはおすすめです。サウナへ入ることでメンタルを安定させることが期待できます。</p>\\n<p>Lowryらの研究[1]では、サウナに入ることでセロトニン分泌が促され、不安やストレス関連の神経障害の改善において重要な役割を果たすことが示されています。（セロトニンとはいわゆる幸福物質と巷で言われているもので、セロトニンが不足することで慢性的ストレスだったり、意欲低下、鬱症状がみられるようになります。）</p>\\n<p>ということで最近鬱っぽいんだよね...って人はとりあえず何も考えずに銭湯へ行きましょう。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705328-e54e2567-bc3e-4ce8-bf58-3d8d6d1df6e7.png&quot; width=&quot;25%&quot; /&gt;</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;</p>\\n<h2>健康にもいい？</h2>\\n<p>これまでメンタル面でのメリットを出してきましたが、もちろん肉体面でもサウナは大いにメリットがあります。</p>\\n<p>当たり前のようですが、高温環境にいることで血流の増加が促され、疲労回復に繋がります。</p>\\n<p>短期的な大きなメリットは疲労回復に留まりますが、継続的にサウナへ赴くことにより心血管疾患への罹患率を低下させられることが示唆されています[2]。（リウマチ、COPD等々への改善効果もあるようですが、この辺を個別に紹介していたらキリがなさそうなのでやめておきます。）</p>\\n<p>メリットばかり述べられてるけど、サウナって健康リスクあるんじゃない...？って噂もたまに見かけますが、小児期から老年期まで健康な人へ健康リスクをもたらすことはないとする研究結果もあるのでそこは大丈夫だと思います[3]。（これはあくまでも健康な人の話であるため、高血圧等何かしらの心血管疾患をお持ちの方は医者に確認をとったうえでサウナにいってください。）</p>\\n<p>&lt;br&gt;</p>\\n<h2>ととのうが分からない？</h2>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705330-58223fb3-c1a4-4a58-8c5c-585927d899cf.png&quot; width=&quot;35%&quot; /&gt;</p>\\n<p>銭湯に行った時、外に置いてある椅子とかでボケ〜ってしてる人いませんか。あれ、ととのってるんですね。あれがいわゆる「ととのい」なんですね。</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;\\nサウナからの外気浴で得られたリラックス状態を「ととのう」と言います。</p>\\n<p>サウナーの人と話すとこのワードたまに出てきませんか？そんな時、ととのうってなんなの？って聞くと「脳が溶ける」とか「無我の境地」、「次元を超える」とか要領を得ない返答が返ってくることが多いはずです。</p>\\n<p>&lt;br&gt;\\nサウナーはこのととのいを得るためにサウナへ赴きます。</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\nこのととのいを体験して欲しく、人にサウナを進めても「や、暑いの嫌いなんだよねー」って返されてしまうことが多いです。</p>\\n<p>自分も暑いのは嫌いですよ。サウナ好きは皆が暑いのが好きってわけではないんですよ。もしそうだったらただの変態集団になってしまう気がするんですけど、どうなんでしょうか。</p>\\n<p>この暑いから嫌っていう人は、サウナの「暑い」の部分しか体験してないからそうなるんじゃないかと思います。</p>\\n<p>そういった人は大抵水風呂等で体を冷ますこともせずに半身浴へ突入したりそのまま浴場から上がってしまったりしますよね。</p>\\n<p>体の芯から温まれてないので外気浴はおろか水風呂に入るのなんて寒いだけなのでととのうことも出来ない、そんな体験してしまったらサウナが苦手になってしまうのも少しわかる気がします。</p>\\n<p>&lt;br&gt;</p>\\n<h2>ととのいを得る</h2>\\n<p>ととのうためには水風呂も外気浴も必須要素となります。</p>\\n<p>まず、サウナ後に水風呂へ入ることで交感神経が活発になり、アドレナリンが放出されます。その後、外気浴によって副交感神経が活発になるのですが、この時、アドレナリンは残っているのに体はリラックスしているというなんとも奇妙な状態へと至ります。これがいわゆるととのっているという状態になります。</p>\\n<p>なので、ととのうためにはサウナ→水風呂→外気浴という流れ全体が重要となっているのです。</p>\\n<p>&lt;br&gt;</p>\\n<h2>初心者向けサウナルーティン</h2>\\n<p>ここまで読んでくださった方はもうサウナに行きたくてウズウズしていることでしょう。簡単にではありますが、ととのいを得るための一般的な流れを紹介します。</p>\\n<ol>\\n<li>\\n<p>洗体</p>\\n<p>とりあえず身体を洗っておきましょう。これによって発汗がより効率的に行えるようになり、よりサウナを楽しめるようになります。</p>\\n</li>\\n<li>\\n<p>サウナ</p>\\n<p>身体の水気を拭き取った後、サウナ室へ入り発汗を行います。体温、心拍数が徐々に上昇することを感じましょう。もしできそうであれば体育座りやあぐらをかきましょう（混んでる時は控えてください）。頭から足までの高低差をできるだけ小さくすることでよりスムーズに血流の増加を促せます。</p>\\n<p>大体5~10分経ったら十分です。もし時間ではなく、心拍数を目安にできるのであれば、通常時の2倍ほどの心拍数で出ると良さそうです。</p>\\n<p>サウナ室は一般的に上段に上がれば上がるほど気温が上昇します。好みの気温を見つけるのも楽しみの一つかもしれません。</p>\\n</li>\\n<li>\\n<p>水風呂</p>\\n<p>掛け湯やシャワーで汗を流してから水風呂に入りましょう。いきなり水風呂に入るのが怖いという方はシャワーである程度身体を冷ましてから入ってもいいかもしれないです。入る長さですが、長い時間入ればいいというものでもないです。30~60秒くらいで身体の表面がしっかりと冷めたと感じるタイミングで出ればいいと思います。</p>\\n<p>水風呂の水温ですが、20度前後であれば、割と柔らかめな印象です。水風呂に入るのが苦手という方は水温20度前後を目安にサウナを探すといいかもしれないです。</p>\\n</li>\\n<li>\\n<p>外気浴</p>\\n<p>椅子に座ったり、横になれるスペースがあれば横になったりして、熱った身体を冷まし、ととのいを満喫しましょう。</p>\\n<p>（サウナがある銭湯であれば大抵の場所は外気浴スペースがあったりしますが、場所によってはサウナはあるのに外気浴スペースがないとこもあるので注意）</p>\\n<p>外気浴を終えたらちゃんと水分補給を行うようにしてください。</p>\\n</li>\\n</ol>\\n<p>これらのサウナ → 水風呂 → 外気浴を１セットとして繰り返し行います。例として自分の平均的なサ活を載せておきます。</p>\\n<ul>\\n<li>サウナ: 8分 × 4（心拍数によって変わる）</li>\\n<li>水風呂: 1分 × 4</li>\\n<li>外気浴: 5分 × 4</li>\\n</ul>\\n<p>この繰り返しの中で、湯船に浸かるのはあまりお勧めできません。ととのいの項でも述べた通り、急激な環境の変化によってととのいが得られるのであって、このリズムを崩してしまっては中途半端にしかととのえなくなってしまいます。</p>\\n<p>&lt;br&gt;</p>\\n<h2>サウナに入るマナー</h2>\\n<p>一応サウナに入る時のマナーというものが存在します。一応紹介はしますが、普通に周りの迷惑にならないように気をつければ大丈夫なはずです。</p>\\n<ul>\\n<li>\\n<p>サウナに入る前には水気を取る</p>\\n<p>サウナに入る前にはある程度の水気を拭き取っておきましょう。汚いものではないでしょうが、サウナマットがべちょべちょになっていて気持ちのいい人なんていません。後から入る人のためにも水気をとってから入ることを心がけましょう。</p>\\n</li>\\n<li>\\n<p>汗を飛ばさない</p>\\n<p>サウナ室内で汗を拭き取ってペッペッと飛ばす人がたまにいます。嘘かもしれませんが、ほんとにいます。不愉快なので控えましょう。移動時に飛ぶ分は仕方ないと思います。そこは寛大になりましょう。</p>\\n</li>\\n<li>\\n<p>サウナ室内で大声で話さない</p>\\n<p>そもそもコロナ禍ということもありどこも默浴を徹底されているので気にするまでもなさそうですが。</p>\\n<p>狭いサウナ室内でワイワイ騒がれたら普通に迷惑ですよね。控えましょう。</p>\\n</li>\\n<li>\\n<p>水風呂に入る前に汗を流す</p>\\n<p>これも当然と言えば当然ですね。身体への負担を低減させるという意味でも必要です。</p>\\n</li>\\n<li>\\n<p>整い椅子に掛け湯する</p>\\n<p>掛け湯OKな場所であれば、いいマナーとされるはずです。椅子を使い終わった後は椅子に掛け湯をすることで後の人がより気持ちよく椅子を使えるようになります。</p>\\n<p>ただ、場所によっては掛け湯禁止の銭湯もあるので、事前に調べておいた方が良さそうです。</p>\\n</li>\\n</ul>\\n<p>&lt;br&gt;</p>\\n<h2>サ活を加速させるグッズ類</h2>\\n<p>これまでサウナ活動いわゆるサ活の基本に触れてきましたが、ここからはよりサ活を有意義なものへとするためのグッズを紹介します。（サウナハット等もあると思いますが、自分が使用してるものしか紹介してません）</p>\\n<h3>サウナを出るタイミングは心拍数で図る</h3>\\n<p>サウナ室内に設置してある12分計や砂時計を目安に出るタイミングを伺う人は多いかと思います。しかし、それだと時と場合によっては最高のととのいが得られないかもしれません。</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\nQ . 常に最高のととのいを得るにはどうしたらいいか？</p>\\n<p>&lt;br&gt;\\nA . サウナを出るタイミングは心拍数を目安にするようにしましょう。</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\nということで自分はスマートウォッチを導入しました。</p>\\n<p>自分はMi bandを使用しています。サウナ用に導入したのは割と最近ですが、今のところ壊れる様子はありません。まあ5000円くらいですので壊れてもショックは大きくありません。</p>\\n<p>Mi bandの場合ですが、ワークアウト計測モードにすることで心拍数を常時確認できるようになります（記録も残るので便利です）（下の画像はある日のサ活）。</p>\\n<p>こういった記録を重ねることで大体これくらいの心拍数で水風呂に入ればいい感じにととのえるなというのが分かるようになります。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705371-edf62458-1821-48a4-9320-04e740e0fed8.png&quot; width=&quot;50%&quot; /&gt;</p>\\n<h3>近視の人でも安心</h3>\\n<p>サウナ室内では基本的にはメガネは外します。（じゃないとメガネのコーティングが剥がれてしまいます）</p>\\n<p>だけど、メガネ無いとマジで周り見えないんだわ、サウナ内でテレビ見たいんだわって人もいると思います。</p>\\n<p>そんな人にはサウナメガネがおすすめです。</p>\\n<p>細かい度数は設定できませんが、-3.00、-5.00といったようにある程度の間隔で度数バリエーションが用意されています。</p>\\n<p>値段も2000円前後~とお手頃なため、気になる方はとりあえず導入してみるのがいいかもしれないです。amazonとかで売ってます。</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705559-300f2ae9-3ff9-403c-b721-7cbe38d07042.png&quot; width=&quot;50%&quot; /&gt;</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;</p>\\n<h2>健康のためである必要はない</h2>\\n<p>サウナに入り、健康体になって帰る。次の日が平日ならそれでもいいかもしれないです。</p>\\n<p>けど、次の日が休日なら？銭湯に食事処が併設されていたら...？</p>\\n<p>&lt;img src=&quot;https://user-images.githubusercontent.com/50108450/145705474-59bf7e0f-8380-4b49-97b8-ab7973707aec.png&quot; width=&quot;40%&quot; /&gt;</p>\\n<p>人とは矛盾の中で生きる生き物なんです。ビールを飲んで生を実感しましょう。</p>\\n<p>&lt;br&gt;</p>\\n<h2>最後に</h2>\\n<p>これまでツラツラとサウナのいいところを書いてきましたが、結局のところ、言葉じゃ伝わらないと思うので、是非一度サウナに行って体感してみてください。</p>\\n<p>リモートではなく、物理出社している社会人の方に限定されますが、なんと帰り際に寄ることでサウナまでの交通費をかけずにサウナに行けます。サウナまでの交通費がタダになる！？もう行くしかないですよね。（これだけで物理出社するモチベーションも湧いてきませんか？僕はこれだけでも物理出社する日が楽しみになりました）</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;\\nとまあ、この記事で興味を持って、今後一人でもサウナーが誕生してくれると嬉しい限りです。</p>\\n<p>次回は15日の <a href=\\"https://adventar.org/users/48634\\">ふかふかさん</a>の記事です。\\nよろしくお願いします。</p>\\n<p>&lt;br&gt;\\n&lt;br&gt;\\n&lt;br&gt;</p>\\n<h2>参考文献</h2>\\n<p>[1] Lowry CA, Lightman SL, Nutt DJ. That warm fuzzy feeling: brain serotonergic neurons and the regulation of emotion. J Psychopharmacol. 2009 Jun;23(4):392-400.</p>\\n<p>[2] Joy Hussain, Marc Cohen, &quot;Clinical Effects of Regular Dry Sauna Bathing: A Systematic Review&quot;, <em>Evidence-Based Complementary and Alternative Medicine</em>, vol. 2018, Article ID 1857413, 30 pages, 2018.</p>\\n<p>[3] Katriina Kukkonen-Harjula &amp; Kyllikki Kauppinen (2006) Health effects and risks of sauna bathing, International Journal of Circumpolar Health, 65:3, 195-205</p>\\n","dir":"posts/json","base":"7-2021-12-13-sauna-adc.json","ext":".json","sourceBase":"7-2021-12-13-sauna-adc.md","sourceExt":".md"}')},375:function(n,e,t){"use strict";t(355)},376:function(n,e,t){(e=t(58)(!1)).push([n.i,".page-wrapper{margin:30px 0}.date{color:#777}.title{margin:20px 0}.tags{display:inline-block;margin-right:5px}.content{margin-top:20px}.content a{word-break:break-all}.twitter{margin-top:30px}",""]),n.exports=e},382:function(n,e,t){"use strict";t.r(e);t(22),t(35),t(78);var r=t(7),o=t(364),l=t.n(o),c=t(365),h=t.n(c),d=t(359),m=r.a.extend({components:{TwitterButton:d.default},created:function(){l.a.setOptions({langPrefix:"hljs language-",highlight:function(code,n){return h.a.highlightAuto(code,[n]).value}})},data:function(){var article=t(354)("./".concat(this.$route.query.base,".json"));return{date:article.created_at.replace("T00:00:00.000Z",""),title:article.title,tags:article.tags.split(", ")}},computed:{content:function(){var article=t(354)("./".concat(this.$route.query.base,".json"));return l()(article.bodyContent)}}}),j=(t(375),t(27)),component=Object(j.a)(m,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"page-wrapper"},[t("div",{staticClass:"date"},[n._v(n._s(n.date))]),n._v(" "),t("h1",{staticClass:"title"},[n._v(n._s(n.title))]),n._v(" "),n._l(n.tags,(function(n){return t("div",{key:n.id,staticClass:"tags"},[t("h5",[t("Badge",{attrs:{text:n}})],1)])})),n._v(" "),t("div",{staticClass:"content",domProps:{innerHTML:n._s(n.content)}}),n._v(" "),t("TwitterButton",{staticClass:"twitter",attrs:{title:n.title,base:n.$route.query.base}})],2)}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{Badge:t(143).default,TwitterButton:t(359).default})}}]);